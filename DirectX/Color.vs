// 정점 버퍼(Vertex Buffer)

// 3D 공의 모형은 수백개의 삼각형으로 만들어져 있는데 이 삼각형들은 세 꼭지점을
// 가지고 있고 이 꼭지점을 정점(Vertex)라고 부른다. 
// 따라서 공을 표현하기 위해서 우리는 공을 구성하고 있는 모든 정점들을 
// 정점 버퍼라고 부르는 특별한 데이터 배열에 넣어주어야 한다.
// 공위의 모든 점을 정점 버퍼에 넣었다면 이를 GPU에게 보내 공을 그리도록 하게 할 수 있습니다.

// 인덱스 버퍼(Index buffers)

// 인덱스 버퍼는 정점 버퍼와 관련이 있는데 이 인덱스 버퍼는 각 정점들이 연결되는
// 순서를 기록하기 위한 것이다. 그러면 GPU는 인덱스 버퍼를 이용해 빠르게 정점
// 버퍼에서 필요한 몇몇 정점들을 찾아낸다. 인덱스 버퍼는 원하는 것을 빠르게 
// 찾는것을 도와준다는 점에서 책의 목차와 같다고 볼 수 있다. 
// DX SDK 문서에서는 인덱스 버퍼의 사용이 비디오 메모리에서 정점 데이터의 캐싱의
// 가능성을 높여준다고 한다. 따라서 성능 측면에서도 인덱스 버퍼의 사용은 권장된다.

// 정점 셰이더(Vertex Shaders)

// 정점 셰이더는 주로 정점 버퍼들의 정점들을 3D 공간으로 변환시켜주는 작은 프로그램이다.
// 이 외에도 각 정점의 법선을 계산한다던가 하는 다른 연산도 가능하다.
// 정점 셰이더 프로그램은 GPU에서 계산이 필요하다고 판달될 때 호출된다. 
// 예를 들어, 5000개의 폴리곤을 가진 모델을 화면에 표시한다면 단지 저 하나의 모델을
// 그리기 위해 매 프레임마다 15000번의 정점 셰이더 프로그램이 실행된다. 따라서
// 프로그램이 60fps를 가진 그래픽 프로그램에서는 단지 5000개의 삼각형을 그리기 위해
// 매 초마다 900,000번의 정점 셰이더를 호출하게 됩니다. 따라서 효율적인 정점 셰이더를 작성하는 것이 중요합니다.

// 픽셀 셰이더(Pixel shaders)

// 픽셀 셰이더는 그리고자 하는 도형에 색상을 입힐 때를 위한 프로그램입니다.
// 이것은 화면에 보여지는 모든 픽셀들에 대해 GPU에서 연산됩니다. 색상을 입히고,
// 택스쳐를 입히고, 광원 효과를 주고, 그 외 다른 많은 도형 채색 효과를 주는 것이
// 바로 이 픽셀 셰이더 프로그램에서 제어됩니다. 픽셀 셰이더는 GPU에 의해 굉장히
// 많이 호출되기 때문에 반드시 효율적으로 작성되어야 합니다.

// HLSL(High Level Shader Language)

// HLSL은 앞서 설명한 DX11에서 사용하는 작은 정점 및 픽셀 셰이더 프로그램을 작성할 때
// 사용하는 일정의 언어입니다. 구문은 미리 정의된 타입이 있다는 것을 빼면 C언어와 비슷합니다.
// HLSL 프로그램 파일은 전역 변수, 타입 정의, 정점 셰이더, 그리고 기하 셰이더로 구성되어 있습니다.


////////////////////////////////////////////////////////////
// Filename: color.vs
////////////////////////////////////////////////////////////

// cbuffer에 대부분의 전역변수를 넣어준다.
cbuffer MatrixBuffer
{
	matrix worldMatrix;
	matrix viewMatrix;
	matrix projectionMatrix;
};

// 사용자 정의 타입.

struct VertexInputType // <- 정점셰이더
{
	float4 position : POSITION; // float 4는 HLSL 지원타입.
	float4 color : COLOR; // float 4에는 RGB + alpha(투명도)가 들어있다.
}; 
// POSITION 그리고 COLOR 그리고 SV_POSITION은 GPU에 이 변수들을 사용할 것이라고 전달합니다.
// 구조는 같지만 정적 및 픽셀 셰이더의 의미가 다르기 때문에 이에 해당하는 두개의 구조체를 만들었습니다.
// COLOR은 두 구조체 모두 공통으로 가지고 있지만, POSITION은 정점 셰이더에 SV_POSITION은 픽셀 셰이더에서
// 동작합니다.

struct PixelInputType  // <- 픽셀셰이더
{
	float4 position : SV_POSITION; 
	float4 color : COLOR;
};

////////////////////////////////////////////////////////////
// Vertex Shader
////////////////////////////////////////////////////////////
PixelInputType ColorVertexShader